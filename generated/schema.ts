// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BookEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("bookId", Value.fromBytes(Bytes.empty()));
    this.set("availableCopies", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BookEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BookEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BookEntity", id.toString(), this);
    }
  }

  static load(id: string): BookEntity | null {
    return changetype<BookEntity | null>(store.get("BookEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get bookId(): Bytes {
    let value = this.get("bookId");
    return value!.toBytes();
  }

  set bookId(value: Bytes) {
    this.set("bookId", Value.fromBytes(value));
  }

  get availableCopies(): BigInt {
    let value = this.get("availableCopies");
    return value!.toBigInt();
  }

  set availableCopies(value: BigInt) {
    this.set("availableCopies", Value.fromBigInt(value));
  }

  get author(): string | null {
    let value = this.get("author");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set author(value: string | null) {
    if (!value) {
      this.unset("author");
    } else {
      this.set("author", Value.fromString(<string>value));
    }
  }
}

export class AuthorEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthorEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuthorEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuthorEntity", id.toString(), this);
    }
  }

  static load(id: string): AuthorEntity | null {
    return changetype<AuthorEntity | null>(store.get("AuthorEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get books(): Array<string> {
    let value = this.get("books");
    return value!.toStringArray();
  }

  set books(value: Array<string>) {
    this.set("books", Value.fromStringArray(value));
  }
}

export class ContractEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractEntity", id.toString(), this);
    }
  }

  static load(id: string): ContractEntity | null {
    return changetype<ContractEntity | null>(store.get("ContractEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }
}
